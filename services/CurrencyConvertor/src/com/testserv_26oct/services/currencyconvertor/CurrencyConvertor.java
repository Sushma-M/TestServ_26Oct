/*Copyright (c) 2016-2017 wavemaker.com All Rights Reserved.
 This software is the confidential and proprietary information of wavemaker.com You shall not disclose such Confidential Information and shall use it only in accordance
 with the terms of the source code license agreement you entered into with wavemaker.com*/
package com.testserv_26oct.services.currencyconvertor;

import java.net.URL;
import javax.xml.namespace.QName;
import javax.xml.ws.WebEndpoint;
import javax.xml.ws.WebServiceClient;
import javax.xml.ws.WebServiceFeature;
import javax.xml.ws.Service;

/**
 * This class was generated by Apache CXF 2.7.11
 * 2016-10-26T04:34:55.272Z
 * Generated source version: 2.7.11
 * 
 */
@WebServiceClient(name = "CurrencyConvertor", 
                  wsdlLocation = "CurrencyConvertor.wsdl",
                  targetNamespace = "http://www.webserviceX.NET/") 
public class CurrencyConvertor extends Service {

    public final static URL WSDL_LOCATION;

    public final static QName SERVICE = new QName("http://www.webserviceX.NET/", "CurrencyConvertor");
    public final static QName CurrencyConvertorHttpPost = new QName("http://www.webserviceX.NET/", "CurrencyConvertorHttpPost");
    public final static QName CurrencyConvertorSoap = new QName("http://www.webserviceX.NET/", "CurrencyConvertorSoap");
    public final static QName CurrencyConvertorSoap12 = new QName("http://www.webserviceX.NET/", "CurrencyConvertorSoap12");
    public final static QName CurrencyConvertorHttpGet = new QName("http://www.webserviceX.NET/", "CurrencyConvertorHttpGet");
    static {
        URL url = CurrencyConvertor.class.getResource("CurrencyConvertor.wsdl");
        if (url == null) {
            url = CurrencyConvertor.class.getClassLoader().getResource("CurrencyConvertor.wsdl");
        } 
        if (url == null) {
            java.util.logging.Logger.getLogger(CurrencyConvertor.class.getName())
                .log(java.util.logging.Level.INFO, 
                     "Can not initialize the default wsdl from {0}", "CurrencyConvertor.wsdl");
        }       
        WSDL_LOCATION = url;
    }

    public CurrencyConvertor(URL wsdlLocation) {
        super(wsdlLocation, SERVICE);
    }

    public CurrencyConvertor(URL wsdlLocation, QName serviceName) {
        super(wsdlLocation, serviceName);
    }

    public CurrencyConvertor() {
        super(WSDL_LOCATION, SERVICE);
    }
    
    //This constructor requires JAX-WS API 2.2. You will need to endorse the 2.2
    //API jar or re-run wsdl2java with "-frontend jaxws21" to generate JAX-WS 2.1
    //compliant code instead.
    public CurrencyConvertor(WebServiceFeature ... features) {
        super(WSDL_LOCATION, SERVICE, features);
    }

    //This constructor requires JAX-WS API 2.2. You will need to endorse the 2.2
    //API jar or re-run wsdl2java with "-frontend jaxws21" to generate JAX-WS 2.1
    //compliant code instead.
    public CurrencyConvertor(URL wsdlLocation, WebServiceFeature ... features) {
        super(wsdlLocation, SERVICE, features);
    }

    //This constructor requires JAX-WS API 2.2. You will need to endorse the 2.2
    //API jar or re-run wsdl2java with "-frontend jaxws21" to generate JAX-WS 2.1
    //compliant code instead.
    public CurrencyConvertor(URL wsdlLocation, QName serviceName, WebServiceFeature ... features) {
        super(wsdlLocation, serviceName, features);
    }

    /**
     *
     * @return
     *     returns CurrencyConvertorHttpPost
     */
    @WebEndpoint(name = "CurrencyConvertorHttpPost")
    public CurrencyConvertorHttpPost getCurrencyConvertorHttpPost() {
        return super.getPort(CurrencyConvertorHttpPost, CurrencyConvertorHttpPost.class);
    }

    /**
     * 
     * @param features
     *     A list of {@link javax.xml.ws.WebServiceFeature} to configure on the proxy.  Supported features not in the <code>features</code> parameter will have their default values.
     * @return
     *     returns CurrencyConvertorHttpPost
     */
    @WebEndpoint(name = "CurrencyConvertorHttpPost")
    public CurrencyConvertorHttpPost getCurrencyConvertorHttpPost(WebServiceFeature... features) {
        return super.getPort(CurrencyConvertorHttpPost, CurrencyConvertorHttpPost.class, features);
    }
    /**
     *
     * @return
     *     returns CurrencyConvertorSoap
     */
    @WebEndpoint(name = "CurrencyConvertorSoap")
    public CurrencyConvertorSoap getCurrencyConvertorSoap() {
        return super.getPort(CurrencyConvertorSoap, CurrencyConvertorSoap.class);
    }

    /**
     * 
     * @param features
     *     A list of {@link javax.xml.ws.WebServiceFeature} to configure on the proxy.  Supported features not in the <code>features</code> parameter will have their default values.
     * @return
     *     returns CurrencyConvertorSoap
     */
    @WebEndpoint(name = "CurrencyConvertorSoap")
    public CurrencyConvertorSoap getCurrencyConvertorSoap(WebServiceFeature... features) {
        return super.getPort(CurrencyConvertorSoap, CurrencyConvertorSoap.class, features);
    }
    /**
     *
     * @return
     *     returns CurrencyConvertorSoap
     */
    @WebEndpoint(name = "CurrencyConvertorSoap12")
    public CurrencyConvertorSoap getCurrencyConvertorSoap12() {
        return super.getPort(CurrencyConvertorSoap12, CurrencyConvertorSoap.class);
    }

    /**
     * 
     * @param features
     *     A list of {@link javax.xml.ws.WebServiceFeature} to configure on the proxy.  Supported features not in the <code>features</code> parameter will have their default values.
     * @return
     *     returns CurrencyConvertorSoap
     */
    @WebEndpoint(name = "CurrencyConvertorSoap12")
    public CurrencyConvertorSoap getCurrencyConvertorSoap12(WebServiceFeature... features) {
        return super.getPort(CurrencyConvertorSoap12, CurrencyConvertorSoap.class, features);
    }
    /**
     *
     * @return
     *     returns CurrencyConvertorHttpGet
     */
    @WebEndpoint(name = "CurrencyConvertorHttpGet")
    public CurrencyConvertorHttpGet getCurrencyConvertorHttpGet() {
        return super.getPort(CurrencyConvertorHttpGet, CurrencyConvertorHttpGet.class);
    }

    /**
     * 
     * @param features
     *     A list of {@link javax.xml.ws.WebServiceFeature} to configure on the proxy.  Supported features not in the <code>features</code> parameter will have their default values.
     * @return
     *     returns CurrencyConvertorHttpGet
     */
    @WebEndpoint(name = "CurrencyConvertorHttpGet")
    public CurrencyConvertorHttpGet getCurrencyConvertorHttpGet(WebServiceFeature... features) {
        return super.getPort(CurrencyConvertorHttpGet, CurrencyConvertorHttpGet.class, features);
    }

}
